<div class="tasks-container">
  <div class="tasks-header">
    <h2>Your Tasks</h2>
    <p>Manage and track your tasks</p>
  </div>

  <div class="stats-container">
    <div class="stat-card">
      <h3><%= stats.total %></h3>
      <p>Total Tasks</p>
    </div>
    <div class="stat-card">
      <h3><%= stats.completed %></h3>
      <p>Completed</p>
    </div>
    <div class="stat-card">
      <h3><%= stats.pending %></h3>
      <p>Pending</p>
    </div>
    <div class="stat-card priority">
      <h3><%= stats.highPriority %></h3>
      <p>High Priority</p>
    </div>
  </div>

  <div class="task-form-container">
    <h3>Add New Task</h3>
    <form id="taskForm">
      <div class="form-row">
        <input
          type="text"
          id="title"
          name="title"
          placeholder="Task title"
          required
        />
        <select id="priority" name="priority">
          <option value="low">Low Priority</option>
          <option value="medium" selected>Medium Priority</option>
          <option value="high">High Priority</option>
        </select>
        <button type="submit">Add Task</button>
      </div>
      <textarea
        id="description"
        name="description"
        placeholder="Task description (optional)"
      ></textarea>
    </form>
  </div>

  <div class="tasks-container">
    <h3>Your Tasks</h3>
    <div id="tasksList" class="tasks-list">
      <% tasks.forEach(task => { %> <%- include('../partials/task-item', { task
      }) %> <% }) %>
    </div>
  </div>
</div>

<script>
  // Add task form submission
  document.getElementById("taskForm").addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData);

    try {
      const response = await fetch("/api/tasks", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        location.reload(); // Simple reload for now
      } else {
        alert("Failed to create task");
      }
    } catch (error) {
      alert("An error occurred while creating the task");
    }
  });

  // Event delegation for task actions
  document.getElementById("tasksList").addEventListener("click", async (e) => {
    const taskId = e.target.dataset.taskId;

    if (!taskId) return;

    if (e.target.classList.contains("toggle-task")) {
      // Toggle task completion
      try {
        const response = await fetch(`/api/tasks/${taskId}/toggle`, {
          method: "PATCH",
        });

        if (response.ok) {
          location.reload(); // Simple reload for now
        } else {
          alert("Failed to update task");
        }
      } catch (error) {
        alert("An error occurred while updating the task");
      }
    } else if (e.target.classList.contains("delete-task")) {
      // Delete task
      if (confirm("Are you sure you want to delete this task?")) {
        try {
          const response = await fetch(`/api/tasks/${taskId}`, {
            method: "DELETE",
          });

          if (response.ok) {
            location.reload(); // Simple reload for now
          } else {
            alert("Failed to delete task");
          }
        } catch (error) {
          alert("An error occurred while deleting the task");
        }
      }
    }
  });
</script>
